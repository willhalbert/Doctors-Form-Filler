{"ast":null,"code":"import { keyframes } from './keyframes.mjs';\nimport { spring } from './spring.mjs';\nimport { decay } from './decay.mjs';\nimport { sync, cancelSync } from '../../frameloop/index.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nconst types = {\n  decay,\n  keyframes: keyframes,\n  tween: keyframes,\n  spring\n};\nfunction loopElapsed(elapsed, duration) {\n  let delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return elapsed - duration - delay;\n}\nfunction reverseElapsed(elapsed) {\n  let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let isForwardPlayback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  return isForwardPlayback ? loopElapsed(duration + -elapsed, duration, delay) : duration - (elapsed - duration) + delay;\n}\nfunction hasRepeatDelayElapsed(elapsed, duration, delay, isForwardPlayback) {\n  return isForwardPlayback ? elapsed >= duration + delay : elapsed <= -delay;\n}\nconst framesync = update => {\n  const passTimestamp = _ref => {\n    let {\n      delta\n    } = _ref;\n    return update(delta);\n  };\n  return {\n    start: () => sync.update(passTimestamp, true),\n    stop: () => cancelSync.update(passTimestamp)\n  };\n};\nfunction animateValue(_ref2) {\n  let {\n    duration,\n    driver = framesync,\n    elapsed = 0,\n    repeat: repeatMax = 0,\n    repeatType = \"loop\",\n    repeatDelay = 0,\n    keyframes: keyframes$1,\n    autoplay = true,\n    onPlay,\n    onStop,\n    onComplete,\n    onRepeat,\n    onUpdate,\n    type = \"keyframes\",\n    ...options\n  } = _ref2;\n  const initialElapsed = elapsed;\n  let driverControls;\n  let repeatCount = 0;\n  let computedDuration = duration;\n  let isComplete = false;\n  let isForwardPlayback = true;\n  let interpolateFromNumber;\n  const animator = types[keyframes$1.length > 2 ? \"keyframes\" : type] || keyframes;\n  const origin = keyframes$1[0];\n  const target = keyframes$1[keyframes$1.length - 1];\n  let state = {\n    done: false,\n    value: origin\n  };\n  /**\n   * If this value needs interpolation (ie is non-numerical), set up an interpolator.\n   * TODO: Keyframes animation also performs this step. This could be removed so it only happens here.\n   */\n  const {\n    needsInterpolation\n  } = animator;\n  if (needsInterpolation && needsInterpolation(origin, target)) {\n    interpolateFromNumber = interpolate([0, 100], [origin, target], {\n      clamp: false\n    });\n    keyframes$1 = [0, 100];\n  }\n  const animation = animator({\n    ...options,\n    duration,\n    keyframes: keyframes$1\n  });\n  function repeat() {\n    repeatCount++;\n    if (repeatType === \"reverse\") {\n      isForwardPlayback = repeatCount % 2 === 0;\n      elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);\n    } else {\n      elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);\n      if (repeatType === \"mirror\") animation.flipTarget();\n    }\n    isComplete = false;\n    onRepeat && onRepeat();\n  }\n  function complete() {\n    driverControls && driverControls.stop();\n    onComplete && onComplete();\n  }\n  function update(delta) {\n    if (!isForwardPlayback) delta = -delta;\n    elapsed += delta;\n    if (!isComplete) {\n      state = animation.next(Math.max(0, elapsed));\n      if (interpolateFromNumber) state.value = interpolateFromNumber(state.value);\n      isComplete = isForwardPlayback ? state.done : elapsed <= 0;\n    }\n    onUpdate && onUpdate(state.value);\n    if (isComplete) {\n      if (repeatCount === 0) {\n        computedDuration = computedDuration !== undefined ? computedDuration : elapsed;\n      }\n      if (repeatCount < repeatMax) {\n        hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();\n      } else {\n        complete();\n      }\n    }\n  }\n  function play() {\n    onPlay && onPlay();\n    driverControls = driver(update);\n    driverControls.start();\n  }\n  autoplay && play();\n  return {\n    stop: () => {\n      onStop && onStop();\n      driverControls && driverControls.stop();\n    },\n    /**\n     * Set the current time of the animation. This is purposefully\n     * mirroring the WAAPI animation API to make them interchanagable.\n     * Going forward this file should be ported more towards\n     * https://github.com/motiondivision/motionone/blob/main/packages/animation/src/Animation.ts\n     * Which behaviourally adheres to WAAPI as far as possible.\n     *\n     * WARNING: This is not safe to use for most animations. We currently\n     * only use it for handoff from WAAPI within Framer.\n     *\n     * This animation function consumes time every frame rather than being sampled for time.\n     * So the sample() method performs some headless frames to ensure\n     * repeats are handled correctly. Ideally in the future we will replace\n     * that method with this, once repeat calculations are pure.\n     */\n    set currentTime(t) {\n      elapsed = initialElapsed;\n      update(t);\n    },\n    /**\n     * animate() can't yet be sampled for time, instead it\n     * consumes time. So to sample it we have to run a low\n     * temporal-resolution version.\n     */\n    sample: t => {\n      elapsed = initialElapsed;\n      const sampleResolution = duration && typeof duration === \"number\" ? Math.max(duration * 0.5, 50) : 50;\n      let sampleElapsed = 0;\n      update(0);\n      while (sampleElapsed <= t) {\n        const remaining = t - sampleElapsed;\n        update(Math.min(remaining, sampleResolution));\n        sampleElapsed += sampleResolution;\n      }\n      return state;\n    }\n  };\n}\nexport { animateValue, hasRepeatDelayElapsed, loopElapsed, reverseElapsed };","map":{"version":3,"names":["keyframes","spring","decay","sync","cancelSync","interpolate","types","tween","loopElapsed","elapsed","duration","delay","arguments","length","undefined","reverseElapsed","isForwardPlayback","hasRepeatDelayElapsed","framesync","update","passTimestamp","_ref","delta","start","stop","animateValue","_ref2","driver","repeat","repeatMax","repeatType","repeatDelay","keyframes$1","autoplay","onPlay","onStop","onComplete","onRepeat","onUpdate","type","options","initialElapsed","driverControls","repeatCount","computedDuration","isComplete","interpolateFromNumber","animator","origin","target","state","done","value","needsInterpolation","clamp","animation","flipTarget","complete","next","Math","max","play","currentTime","t","sample","sampleResolution","sampleElapsed","remaining","min"],"sources":["/Users/williamhalbert/Desktop/ChemE-AI/client/node_modules/framer-motion/dist/es/animation/legacy-popmotion/index.mjs"],"sourcesContent":["import { keyframes } from './keyframes.mjs';\nimport { spring } from './spring.mjs';\nimport { decay } from './decay.mjs';\nimport { sync, cancelSync } from '../../frameloop/index.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\n\nconst types = {\n    decay,\n    keyframes: keyframes,\n    tween: keyframes,\n    spring,\n};\nfunction loopElapsed(elapsed, duration, delay = 0) {\n    return elapsed - duration - delay;\n}\nfunction reverseElapsed(elapsed, duration = 0, delay = 0, isForwardPlayback = true) {\n    return isForwardPlayback\n        ? loopElapsed(duration + -elapsed, duration, delay)\n        : duration - (elapsed - duration) + delay;\n}\nfunction hasRepeatDelayElapsed(elapsed, duration, delay, isForwardPlayback) {\n    return isForwardPlayback ? elapsed >= duration + delay : elapsed <= -delay;\n}\nconst framesync = (update) => {\n    const passTimestamp = ({ delta }) => update(delta);\n    return {\n        start: () => sync.update(passTimestamp, true),\n        stop: () => cancelSync.update(passTimestamp),\n    };\n};\nfunction animateValue({ duration, driver = framesync, elapsed = 0, repeat: repeatMax = 0, repeatType = \"loop\", repeatDelay = 0, keyframes: keyframes$1, autoplay = true, onPlay, onStop, onComplete, onRepeat, onUpdate, type = \"keyframes\", ...options }) {\n    const initialElapsed = elapsed;\n    let driverControls;\n    let repeatCount = 0;\n    let computedDuration = duration;\n    let isComplete = false;\n    let isForwardPlayback = true;\n    let interpolateFromNumber;\n    const animator = types[keyframes$1.length > 2 ? \"keyframes\" : type] || keyframes;\n    const origin = keyframes$1[0];\n    const target = keyframes$1[keyframes$1.length - 1];\n    let state = { done: false, value: origin };\n    /**\n     * If this value needs interpolation (ie is non-numerical), set up an interpolator.\n     * TODO: Keyframes animation also performs this step. This could be removed so it only happens here.\n     */\n    const { needsInterpolation } = animator;\n    if (needsInterpolation && needsInterpolation(origin, target)) {\n        interpolateFromNumber = interpolate([0, 100], [origin, target], {\n            clamp: false,\n        });\n        keyframes$1 = [0, 100];\n    }\n    const animation = animator({\n        ...options,\n        duration,\n        keyframes: keyframes$1,\n    });\n    function repeat() {\n        repeatCount++;\n        if (repeatType === \"reverse\") {\n            isForwardPlayback = repeatCount % 2 === 0;\n            elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);\n        }\n        else {\n            elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);\n            if (repeatType === \"mirror\")\n                animation.flipTarget();\n        }\n        isComplete = false;\n        onRepeat && onRepeat();\n    }\n    function complete() {\n        driverControls && driverControls.stop();\n        onComplete && onComplete();\n    }\n    function update(delta) {\n        if (!isForwardPlayback)\n            delta = -delta;\n        elapsed += delta;\n        if (!isComplete) {\n            state = animation.next(Math.max(0, elapsed));\n            if (interpolateFromNumber)\n                state.value = interpolateFromNumber(state.value);\n            isComplete = isForwardPlayback ? state.done : elapsed <= 0;\n        }\n        onUpdate && onUpdate(state.value);\n        if (isComplete) {\n            if (repeatCount === 0) {\n                computedDuration =\n                    computedDuration !== undefined ? computedDuration : elapsed;\n            }\n            if (repeatCount < repeatMax) {\n                hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();\n            }\n            else {\n                complete();\n            }\n        }\n    }\n    function play() {\n        onPlay && onPlay();\n        driverControls = driver(update);\n        driverControls.start();\n    }\n    autoplay && play();\n    return {\n        stop: () => {\n            onStop && onStop();\n            driverControls && driverControls.stop();\n        },\n        /**\n         * Set the current time of the animation. This is purposefully\n         * mirroring the WAAPI animation API to make them interchanagable.\n         * Going forward this file should be ported more towards\n         * https://github.com/motiondivision/motionone/blob/main/packages/animation/src/Animation.ts\n         * Which behaviourally adheres to WAAPI as far as possible.\n         *\n         * WARNING: This is not safe to use for most animations. We currently\n         * only use it for handoff from WAAPI within Framer.\n         *\n         * This animation function consumes time every frame rather than being sampled for time.\n         * So the sample() method performs some headless frames to ensure\n         * repeats are handled correctly. Ideally in the future we will replace\n         * that method with this, once repeat calculations are pure.\n         */\n        set currentTime(t) {\n            elapsed = initialElapsed;\n            update(t);\n        },\n        /**\n         * animate() can't yet be sampled for time, instead it\n         * consumes time. So to sample it we have to run a low\n         * temporal-resolution version.\n         */\n        sample: (t) => {\n            elapsed = initialElapsed;\n            const sampleResolution = duration && typeof duration === \"number\"\n                ? Math.max(duration * 0.5, 50)\n                : 50;\n            let sampleElapsed = 0;\n            update(0);\n            while (sampleElapsed <= t) {\n                const remaining = t - sampleElapsed;\n                update(Math.min(remaining, sampleResolution));\n                sampleElapsed += sampleResolution;\n            }\n            return state;\n        },\n    };\n}\n\nexport { animateValue, hasRepeatDelayElapsed, loopElapsed, reverseElapsed };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}